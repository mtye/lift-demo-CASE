 * Notes for Step 0

The pom.xml file and the contents of the src directory were generated by Maven
using the following command:

  mvn archetype:generate -U -DarchetypeGroupId=net.liftweb \
                            -DarchetypeArtifactId=lift-archetype-basic \
                            -DarchetypeVersion=2.0-M3

And specifying:

  "com.marktye"      for the groupId,
  "lift-demo-CASE"   for the artifactId,
  "1.0-SNAPSHOT"     for the version, and
  "com.marktye.rhcp" for the package.

The Maven-generated web application can be compiled and executed with the
command:

  mvn jetty:run


 * Notes for Step 1

As a precursor to developing the Giveaway application, some of the artifacts
generated by the Maven archetype were deleted or changed.

The application does not serve any static files, so the "static" directory
under src/main/webapp was deleted, along with the corresponding menu entry in
the Boot.scala file.

The "lift-archetype-basic" archetype uses the artifactId specified in the
generation process to customize several elements of the application's "chrome",
e.g., the home page, the default page title, and the header. The artifactId
used in this case, "lift-demo-CASE", is somewhat inelegant, so the default
template and home page were changed to use the title "RHCP" instead.


 * Notes for Step 2

The first feature for the Giveaway application is a page for creating new
giveaways. A template named "create.html" was created in the
"src/main/webapp/giveaway" directory. This template uses the "lift:surround"
tag to embed its content within the default template, thus retaining the same
layout, styling, and menu as the home page.

The "<lift:Giveaway.create>" tag in the template references a method named
"create" in the "Giveaway" snippet, which is in the com.marktye.rhcp.snippet
package. This method binds dynamic content to tags within the
"<lift:Giveaway.create>" tag. The "<g:name>" tag is bound to an "input" form
element of type "text", the "<g:description>" tag is bound to a "textarea"
form element, and the "<g:submit>" tag is bound to a submit button.

The form elements are generated with the net.liftweb.http.SHtml object, which
has a wide variety of helper methods for creating HTML markup. The second
parameter to the "text" and "textarea" methods is a function that will be
invoked when the form is submitted. These functions are used to capture the
values of the input and textarea elements and assign them to local variables.
The second parameter to the "submit" method is also a function that is invoked
when the form is submitted. It sends a success message to the notification area
below the menu and redirects the user to the home page.

Finally, a menu item for the new page was created in the Boot.scala file and
added to the list of menu entries. The menu item tells Lift to make the new
page accessible at a relative URL of "giveaway/create" and display a
corresponding menu link with the title "Create New Giveaway".


 * Notes for Step 3

In this step, a page was created to display the giveaways. A template named
"list.html" was created in the giveaway directory. Just as in the previous
chapter, the "lift:surround" tag embeds this template within the default
template.

The "<lift:Giveaway.list>" tag links the template to the "list" method in the
Giveaway snippet, which generates all the dynamic content within the tag. The
giveaways are displayed in an HTML table, with the name in the first column
and the description in the second column.

In order to display the giveaways, the application must keep track of them as
they are created. To do this, a Giveaway companion object was created and
given a variable that stores giveaways as a list of (String, String) pairs.
Since companion objects are singletons, this list of giveaways is accessible
to all instances of the Giveaway snippet.

The "create" method in the Giveaway snippet was modified to add each newly-
created giveaway to the companion object's list of giveaways. The method's
redirect was also changed to send the user to the giveaway list page after
each new giveaway is created.

In the "list" method, each giveaway in the companion object's list is mapped
to the result of a "bind" method, which binds the "<g:name/>" tag in the
template to the giveaway's name, and the "<g:description/>" tag to the
description. The "chooseTemplate" method in the bind sets the binding context
to the "<g:giveaways>" tag. The net result is that the content outside the
<g:giveaways> tag - i.e., the <table>, <thead> and <tbody> tags - is preserved
as-is, while the content inside the "<g:giveaways>" tag is repeated for
each giveaway in the list, with the name and description tags bound to the
appropriate value for each giveaway.

Finally, a menu item for the list page was added to the Boot.scala file. The
menu item has a title of "List Giveaways" and links to the relative URL
"giveaway/list".


 * Notes for Step 4

The "ifLoggedIn" test was added to the Boot.scala file. This test has a
function that yields "true" if the current User is logged in and "false"
otherwise, and a message that will be displayed in the notification area if a
user who is not logged in attempts to access a menu item protected by the
test. The test is used to secure the "Create New Giveaway" and "List Giveaway"
pages.


 * Notes for Step 5

One unfortunate consequence of storing the list of giveaways in a singleton
object is that the list is lost when the server shuts down. To fix this
shortcoming, a mapper class named "Giveaway" was created in the
com.marktye.rhcp.model package. This class enables Giveaway instances to be
persisted to and retrieved from a SQL database - in this case, Lift's default
H2 database.

The Giveaway class extends the LongKeyedMapper trait, which enables some basic
persistence functionality and indicates that the primary key will be of type
Long. The IdPK trait provides a default primary key, a field named "id" that
maps to a database table column also named "id".

The Mapper trait defines an abstract method named "getSingleton" that
subclasses must implement to provide a reference to a MetaMapper object. The
Giveaway class's getSingleton method refers to its own companion object, which
must also extend the Giveaway class itself in order to satisfy the MetaMapper
trait's self-type requirements.

The Giveaway's "name" and "description" fields are inner singleton objects
that extend the MappedText and MappedTextarea classes, respectively. A Mapper's
data fields must extend the MappedField trait, and Lift provides a number of
convenience classes such as MappedText and MappedTextarea for mapping various
SQL data types to a variety of different Scala types.

The Giveaway snippet was changed to use this new Giveaway mapper class instead
of the singleton object's list. In the "create" method, the name and
description variables were replaced with a new instance of the Giveaway class,
which is saved to the database when the form is submitted. The binding of the
"name" and "description" tags was changed to form elements generated by the
"toForm" helper on name and description fields. The "toForm"-generated elements
are populated with the value of the underlying field, and when the value of the
form element changes, the underlying field is updated with the new value.

In the "list" method, the companion object's list of giveaways was replaced
with a call to the "findAll" method on the Giveaway meta-object. The findAll
method retrieves a list of all Giveaways that have been saved in the database.
Each Giveaway is bound to the contents of the "giveaways" tag, and the "name"
and "description" tags are bound to the corresponding fields of the Giveaway.

The Giveaway companion object was deleted, since the list of (name,
description) pairs is no longer needed.

Finally, the Giveaway class was added to the list of Mapper classes managed by
the Schemifier in Boot.scala. The Schemifier runs at server startup and
automatically modifies the database schema to ensure that the tables and
columns required by each Mapper class are present.


 * Copyright and License

Copyright Â© 2010 Mark Tye

This work is licensed under the Creative Commons Attribution-Noncommercial-Share
Alike 3.0 United States License. To view a copy of this license, visit

  http://creativecommons.org/licenses/by-nc-sa/3.0/us/
